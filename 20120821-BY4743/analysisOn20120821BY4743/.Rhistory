### 3) model H1g, different G, same I
### 4) model H2, different G, different I
#    I1       G1       I2         G2
H0  <- function( rawIG ) { IG <- c(rawIG[1], rawIG[2], rawIG[1], rawIG[2] ) }  #all the same
H1i <- function( rawIG ) { IG <- c(rawIG[1], rawIG[2], rawIG[3], rawIG[2] ) }  #different I
H1g <- function( rawIG ) { IG <- c(rawIG[1], rawIG[2], rawIG[1], rawIG[4] ) }  # different G
H2  <- function( rawIG ) { IG <- c(rawIG[1], rawIG[2], rawIG[3], rawIG[4] ) }  # all different
Hx.llh.gompertz.single.run <- function( rawIG, model, lifespan1, lifespan2 ) {
IG = model(rawIG);
I1 = IG[1]; G1 = IG[2]; I2 = IG[3]; G2 = IG[4];
my.data1 = lifespan1[!is.na(lifespan1)];
my.data2 = lifespan2[!is.na(lifespan2)];
log_s1 = (I1/G1) *(1 - exp(G1* my.data1))
log_s2 = (I2/G2) *(1 - exp(G2* my.data2))
log_m1 = log(I1) +  G1 * my.data1 ;
log_m2 = log(I2) +  G2 * my.data2 ;
my.lh = sum(log_s1) + sum(log_m1) + sum(log_s2) + sum(log_m2)
#print (IG ); #trace the convergence
ret = - my.lh # because optim seems to maximize
}
## LRT to exam whether wt, wtCR share the same G, I
llh.H0   = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H0,   lifespan1=tb$wt, lifespan2=tb$wtCR );
llh.H1i  = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H1i,  lifespan1=tb$wt, lifespan2=tb$wtCR );
llh.H1g  = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H1g,  lifespan1=tb$wt, lifespan2=tb$wtCR );
llh.H2  = optim( c(0.01,0.2,0.01,0.1),   Hx.llh.gompertz.single.run, model=H2,  lifespan1=tb$wt, lifespan2=tb$wtCR );
cbind(llh.H0$par, llh.H1i$par, llh.H1g$par, llh.H2$par);
LH = c(llh.H0$value, llh.H1i$value, llh.H1g$value, llh.H2$value);
LH
deltaLH =  - LH + llh.H0$value;
deltaLH
1 - pchisq( 2*deltaLH, df =c(1,1,1,2) );
#p=0.06 not significant for all models.
#################################
###### End of LRT    ############
#################################
## LRT to exam whether ybr053cD, and CR share the same G, I
llh.H0   = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H0,   lifespan1=tb[,3], lifespan2=tb[,4] );
llh.H1i  = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H1i,  lifespan1=tb[,3], lifespan2=tb[,4] );
llh.H1g  = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H1g,  lifespan1=tb[,3], lifespan2=tb[,4] );
llh.H2   = optim( c(0.01,0.2,0.01,0.1),   Hx.llh.gompertz.single.run, model=H2,  lifespan1=tb[,3], lifespan2=tb[,4] );
cbind(llh.H0$par, llh.H1i$par, llh.H1g$par, llh.H2$par);
LH = c(llh.H0$value, llh.H1i$value, llh.H1g$value, llh.H2$value);
LH
deltaLH =  - LH + llh.H0$value;
deltaLH
1 - pchisq( 2*deltaLH, df =c(1,1,1,2) );
#[1] 1.00000000 0.01498437 0.01368829 0.04515191
#################################
###### End of LRT    ############
#################################
## LRT to exam whether ybr053cD, and CR share the same G, I
llh.H0   = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H0,   lifespan1=tb[,5], lifespan2=tb[,6] );
llh.H1i  = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H1i,  lifespan1=tb[,5], lifespan2=tb[,6] );
llh.H1g  = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H1g,  lifespan1=tb[,5], lifespan2=tb[,6] );
llh.H2   = optim( c(0.01,0.2,0.01,0.1),   Hx.llh.gompertz.single.run, model=H2,  lifespan1=tb[,5], lifespan2=tb[,6] );
cbind(llh.H0$par, llh.H1i$par, llh.H1g$par, llh.H2$par);
LH = c(llh.H0$value, llh.H1i$value, llh.H1g$value, llh.H2$value);
LH
deltaLH =  - LH + llh.H0$value;
deltaLH
1 - pchisq( 2*deltaLH, df =c(1,1,1,2) );
#[1] 1.00000000 0.04595566 0.31817030 0.04188332
#################################
###### End of LRT    ############
#################################
## LRT to exam whether ybr053cD, and CR share the same G, I
llh.H0   = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H0,   lifespan1=tb[,7], lifespan2=tb[,8] );
llh.H1i  = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H1i,  lifespan1=tb[,7], lifespan2=tb[,8] );
llh.H1g  = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H1g,  lifespan1=tb[,7], lifespan2=tb[,8] );
llh.H2   = optim( c(0.01,0.2,0.01,0.1),   Hx.llh.gompertz.single.run, model=H2,  lifespan1=tb[,7], lifespan2=tb[,8] );
cbind(llh.H0$par, llh.H1i$par, llh.H1g$par, llh.H2$par);
LH = c(llh.H0$value, llh.H1i$value, llh.H1g$value, llh.H2$value);
LH
deltaLH =  - LH + llh.H0$value;
deltaLH
1 - pchisq( 2*deltaLH, df =c(1,1,1,2) );
# [1] 1.00000000 0.04595566 0.31817030 0.04188332
#################################
###### End of LRT    ############
#################################
###############LRT compare mutants with wt (1), 3, 5, 7
llh.H0   = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H0,   lifespan1=tb[,1], lifespan2=tb[,3] );
llh.H1i  = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H1i,  lifespan1=tb[,1], lifespan2=tb[,3] );
llh.H1g  = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H1g,  lifespan1=tb[,1], lifespan2=tb[,3] );
llh.H2   = optim( c(0.01,0.2,0.01,0.1),   Hx.llh.gompertz.single.run, model=H2,  lifespan1=tb[,1], lifespan2=tb[,3] );
cbind(llh.H0$par, llh.H1i$par, llh.H1g$par, llh.H2$par);
LH = c(llh.H0$value, llh.H1i$value, llh.H1g$value, llh.H2$value);
LH
deltaLH =  - LH + llh.H0$value;
deltaLH
1 - pchisq( 2*deltaLH, df =c(1,1,1,2) );
###############LRT compare mutants with wt (1), 3, 5, 7
llh.H0   = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H0,   lifespan1=tb[,1], lifespan2=tb[,5] );
llh.H1i  = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H1i,  lifespan1=tb[,1], lifespan2=tb[,5] );
llh.H1g  = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H1g,  lifespan1=tb[,1], lifespan2=tb[,5] );
llh.H2   = optim( c(0.01,0.2,0.01,0.1),   Hx.llh.gompertz.single.run, model=H2,  lifespan1=tb[,1], lifespan2=tb[,5] );
cbind(llh.H0$par, llh.H1i$par, llh.H1g$par, llh.H2$par);
LH = c(llh.H0$value, llh.H1i$value, llh.H1g$value, llh.H2$value);
LH
deltaLH =  - LH + llh.H0$value;
deltaLH
1 - pchisq( 2*deltaLH, df =c(1,1,1,2) );
###############LRT compare mutants with wt (1), 7, significant R and G
llh.H0   = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H0,   lifespan1=tb[,1], lifespan2=tb[,7] );
llh.H1i  = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H1i,  lifespan1=tb[,1], lifespan2=tb[,7] );
llh.H1g  = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H1g,  lifespan1=tb[,1], lifespan2=tb[,7] );
llh.H2   = optim( c(0.01,0.2,0.01,0.1),   Hx.llh.gompertz.single.run, model=H2,  lifespan1=tb[,1], lifespan2=tb[,7] );
cbind(llh.H0$par, llh.H1i$par, llh.H1g$par, llh.H2$par);
LH = c(llh.H0$value, llh.H1i$value, llh.H1g$value, llh.H2$value);
LH
deltaLH =  - LH + llh.H0$value;
deltaLH
1 - pchisq( 2*deltaLH, df =c(1,1,1,2) );
###############LRT compare mutants with wtCR (2), 4, significant R and G
llh.H0   = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H0,   lifespan1=tb[,2], lifespan2=tb[,4] );
llh.H1i  = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H1i,  lifespan1=tb[,2], lifespan2=tb[,4] );
llh.H1g  = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H1g,  lifespan1=tb[,2], lifespan2=tb[,4] );
llh.H2   = optim( c(0.01,0.2,0.01,0.1),   Hx.llh.gompertz.single.run, model=H2,  lifespan1=tb[,2], lifespan2=tb[,4] );
cbind(llh.H0$par, llh.H1i$par, llh.H1g$par, llh.H2$par);
LH = c(llh.H0$value, llh.H1i$value, llh.H1g$value, llh.H2$value);
LH
deltaLH =  - LH + llh.H0$value;
deltaLH
1 - pchisq( 2*deltaLH, df =c(1,1,1,2) );
###############LRT compare mutants with wtCR (2), 6, significant R and G
llh.H0   = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H0,   lifespan1=tb[,2], lifespan2=tb[,6] );
llh.H1i  = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H1i,  lifespan1=tb[,2], lifespan2=tb[,6] );
llh.H1g  = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H1g,  lifespan1=tb[,2], lifespan2=tb[,6] );
llh.H2   = optim( c(0.01,0.2,0.01,0.1),   Hx.llh.gompertz.single.run, model=H2,  lifespan1=tb[,2], lifespan2=tb[,6] );
cbind(llh.H0$par, llh.H1i$par, llh.H1g$par, llh.H2$par);
LH = c(llh.H0$value, llh.H1i$value, llh.H1g$value, llh.H2$value);
LH
deltaLH =  - LH + llh.H0$value;
deltaLH
1 - pchisq( 2*deltaLH, df =c(1,1,1,2) );
###############LRT compare mutants with wtCR (2), 8, significant R or G?
llh.H0   = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H0,   lifespan1=tb[,2], lifespan2=tb[,8] );
llh.H1i  = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H1i,  lifespan1=tb[,2], lifespan2=tb[,8] );
llh.H1g  = optim( c(0.01,0.2,0.01,0.1),  Hx.llh.gompertz.single.run, model=H1g,  lifespan1=tb[,2], lifespan2=tb[,8] );
llh.H2   = optim( c(0.01,0.2,0.01,0.1),   Hx.llh.gompertz.single.run, model=H2,  lifespan1=tb[,2], lifespan2=tb[,8] );
cbind(llh.H0$par, llh.H1i$par, llh.H1g$par, llh.H2$par);
LH = c(llh.H0$value, llh.H1i$value, llh.H1g$value, llh.H2$value);
LH
deltaLH =  - LH + llh.H0$value;
deltaLH
1 - pchisq( 2*deltaLH, df =c(1,1,1,2) );
View(tb)
t.test(tb[,1], tb[,2])
head(tb)
wilcox.test(tb[,1], tb[,2])
head(tb)
ks.test(tb[,1], tb[,2])
summary(tb)
t.test(tb$wt, tb$wt.CR)#this group CR effect is not significant
t.test(tb$wt, tb$wt.CR)#this group CR effect is not significant
summary(tb)
t.test(tb$ybr053cD, tb$Ybr053c.CR)
wilcox.test(tb$ybr053cD, tb$Ybr053c.CR)
t.test(tb$ybr053cD, tb$Ybr053c.CR, alt='gr')
t.test(tb$wt, tb$wt.CR, alt='gr')#this group CR effect is not significant
t.test(tb$wt, tb$wt.CR, alt='less')#this group CR effect is not significant
wilcox.test(tb$ybr053cD, tb$Ybr053c.CR, alt='gr')
t.test(tb$ybr053cD, tb$Ybr053c.CR, alt='gr')
head(tb)
t.test(tb$ybr053cD, tb$Ybr053c.CR, alt='gr')
t.test(tb$izh4D, tb$izh4.CR)
head(tb)
t.test(tb$Pvac8ERG2, tb$Pvac8ERG2.CR)
setwd("~/github/Moore-Summer14/20120821-BY4743/analysisOn20120821BY4743")
#overlay FLX
rm(list=ls())
debug = 0;
require(flowCore);  require(flowClust); require(hexbin); require(stringr);
require(Heatplus); #for RGBColVec
mystrains=c("M5","M13")
mypatterns = c("DHR","DHE");
for(mys in mystrains) {
List1 = list.files( path="fcs", pattern = mys );
for( myp in mypatterns) {
Blanks =  List1[ str_detect(List1, perl("BLANK")) ]
DHXfile = sort( c(List1[ str_detect(List1, perl(myp)) ], Blanks) )
#DHRfile = sort( c(List1[ str_detect(List1, perl("DHR")) ], Blanks ) )
facFlList = DHXfile
#generate a dataframe
Row.Len = 5E3;
merged.FLX = matrix(data=NA, nrow=Row.Len,ncol=1)
names(merged.FLX) = c("tmp")
#for( i in 1:3) {
for (  i in 1: length(facFlList) ) {
# i = 1;
myfl.full = paste( 'fcs/', facFlList[i], sep='');
myfcs = read.FCS( myfl.full );
# if(debug>0) {    myfcs@exprs = myfcs@exprs[1:Row.Len, ]   }
#remove debris. pcp1D has much broad distribution and has to be done separately
my.gate = rectangleGate(filterId="Cells", list("FSC-H"=c(2.5E2, Inf), "SSC-H"=c(2.5E2, Inf), "FL3-H"=c(0, Inf) ))
my.filter = filter( myfcs, my.gate)
myfcs2 = Subset( myfcs, my.filter )
mydata = data.frame(log10(myfcs2@exprs))
mynames = names(mydata)
current.FLX = mydata$FL1.H   ### default for DHR; change here for other probes
# if ( myp =='DHE') { current.FLX = mydata$FL3.H } #change here for other probes ##use stringr detect to change here !!!
if( str_detect(myfl.full, perl("DHE"))) {  current.FLX = mydata$FL3.H }; #2012June 14 change
if ( length(current.FLX) > Row.Len ) {current.FLX = current.FLX[1:Row.Len]
} else if (length(current.FLX < Row.Len)) {
current.FLX = c(current.FLX, rep(NA, (Row.Len - length(current.FLX))))
}
merged.FLX = cbind( merged.FLX, current.FLX)
oldnames = colnames( merged.FLX )
newnames = c(oldnames[-length(oldnames)], facFlList[i])
colnames( merged.FLX ) = newnames
} #i loop
merged.FLX = merged.FLX[,-1] ###2012 June 10, change
#overlay
mycolors = rainbow(length(facFlList))
#mycolors = rev( RGBColVec(length(facFlList)  ) )
d1 = density( merged.FLX[,1], na.rm=T )
pdf( paste("batch-Overlay", mys, myp, "pdf",sep="."),  width=10,height=11)
plot( d1, xlim=c(0,7), ylim = c(0,5), main=getwd(), col=mycolors[1] )
for( j in 2:length(merged.FLX[1,])) {
d = density( merged.FLX[,j], na.rm=T )
lines(d, col=mycolors[j])
}
legend(4, 2, colnames(merged.FLX), lty=1, col=mycolors)
dev.off()
} #myp
}#mys
#quit("yes")
install.packages("stringr")
#overlay FLX
rm(list=ls())
debug = 0;
require(flowCore);  require(flowClust); require(hexbin); require(stringr);
require(Heatplus); #for RGBColVec
mystrains=c("M5","M13")
mypatterns = c("DHR","DHE");
for(mys in mystrains) {
List1 = list.files( path="fcs", pattern = mys );
for( myp in mypatterns) {
Blanks =  List1[ str_detect(List1, perl("BLANK")) ]
DHXfile = sort( c(List1[ str_detect(List1, perl(myp)) ], Blanks) )
#DHRfile = sort( c(List1[ str_detect(List1, perl("DHR")) ], Blanks ) )
facFlList = DHXfile
#generate a dataframe
Row.Len = 5E3;
merged.FLX = matrix(data=NA, nrow=Row.Len,ncol=1)
names(merged.FLX) = c("tmp")
#for( i in 1:3) {
for (  i in 1: length(facFlList) ) {
# i = 1;
myfl.full = paste( 'fcs/', facFlList[i], sep='');
myfcs = read.FCS( myfl.full );
# if(debug>0) {    myfcs@exprs = myfcs@exprs[1:Row.Len, ]   }
#remove debris. pcp1D has much broad distribution and has to be done separately
my.gate = rectangleGate(filterId="Cells", list("FSC-H"=c(2.5E2, Inf), "SSC-H"=c(2.5E2, Inf), "FL3-H"=c(0, Inf) ))
my.filter = filter( myfcs, my.gate)
myfcs2 = Subset( myfcs, my.filter )
mydata = data.frame(log10(myfcs2@exprs))
mynames = names(mydata)
current.FLX = mydata$FL1.H   ### default for DHR; change here for other probes
# if ( myp =='DHE') { current.FLX = mydata$FL3.H } #change here for other probes ##use stringr detect to change here !!!
if( str_detect(myfl.full, perl("DHE"))) {  current.FLX = mydata$FL3.H }; #2012June 14 change
if ( length(current.FLX) > Row.Len ) {current.FLX = current.FLX[1:Row.Len]
} else if (length(current.FLX < Row.Len)) {
current.FLX = c(current.FLX, rep(NA, (Row.Len - length(current.FLX))))
}
merged.FLX = cbind( merged.FLX, current.FLX)
oldnames = colnames( merged.FLX )
newnames = c(oldnames[-length(oldnames)], facFlList[i])
colnames( merged.FLX ) = newnames
} #i loop
merged.FLX = merged.FLX[,-1] ###2012 June 10, change
#overlay
mycolors = rainbow(length(facFlList))
#mycolors = rev( RGBColVec(length(facFlList)  ) )
d1 = density( merged.FLX[,1], na.rm=T )
pdf( paste("batch-Overlay", mys, myp, "pdf",sep="."),  width=10,height=11)
plot( d1, xlim=c(0,7), ylim = c(0,5), main=getwd(), col=mycolors[1] )
for( j in 2:length(merged.FLX[1,])) {
d = density( merged.FLX[,j], na.rm=T )
lines(d, col=mycolors[j])
}
legend(4, 2, colnames(merged.FLX), lty=1, col=mycolors)
dev.off()
} #myp
}#mys
#quit("yes")
source("http://bioconductor.org/biocLite.R")
biocLite("flowCore")
source("http://bioconductor.org/biocLite.R")
biocLite("flowClust")
source("http://bioconductor.org/biocLite.R")
biocLite("Heatplus")
install.packages("hexbin")
#2012 June 13, add patterns for DHR and DHE multiple channels, FL1, FL3
rm(list=ls())
debug = 0;
require(flowCore);  require(flowClust); require(hexbin)
mypatterns = c("DHR","DHE");
for( myp in mypatterns ) {
facFlList = list.files( path="fcs", pattern = myp);  facFlList
facFlList2 = list.files( path="fcs", pattern = "BLANK");  facFlList2
facFlList = sort( c(facFlList, facFlList2))
#generate a dataframe
Row.Len = 5E3;
merged.FLX = matrix(data=NA, nrow=Row.Len,ncol=1)
names(merged.FLX) = c("tmp")
#for( i in 1:4) {
for (  i in 1: length(facFlList) ) {
# i = 1;
myfl.full = paste( 'fcs/', facFlList[i], sep='');
myfcs = read.FCS( myfl.full );
# if(debug>0) {    myfcs@exprs = myfcs@exprs[1:Row.Len, ]   }
#remove debris. pcp1D has much broad distribution and has to be done separately
my.gate = rectangleGate(filterId="Cells", list("FSC-H"=c(2.5E2, Inf), "SSC-H"=c(2.5E2, Inf), "FL3-H"=c(0, Inf) ))
my.filter = filter( myfcs, my.gate)
myfcs2 = Subset( myfcs, my.filter )
mydata = data.frame(log10(myfcs2@exprs))
mynames = names(mydata)
current.FLX = mydata$FL1.H   ### default for DHR; change here for other probes
if ( myp =='DHE') { current.FLX = mydata$FL3.H } #change here for other probes
merged.FLX = cbind( merged.FLX, current.FLX)
oldnames = colnames( merged.FLX )
newnames = c(oldnames[-length(oldnames)], facFlList[i])
colnames( merged.FLX ) = newnames
} #i loop
merged.FLX = merged.FLX[,-1] ###2012 June 10, change
#boxplot
pdf( paste("batch-boxplot", myp, "pdf",sep="."),  width=10,height=11)
par(oma=c(2,12,2,2), las=1) #adjust margin for labels, 2012June10 add las=1
#par(mar=c(2,20,2,2), las=1) #adjust margin for labels
boxplot( as.data.frame(merged.FLX), horizontal=TRUE, main=getwd())
dev.off()
}#myp
#quit("yes")
List1 = list.files( path="fcs", pattern = mys );
myp='DHE'
facFlList = list.files( path="fcs", pattern = myp);  facFlList
facFlList2 = list.files( path="fcs", pattern = "BLANK");  facFlList2
rm(list=ls())
library(stringr)
debug = 0;
require(flowCore);  require(flowClust); require(flowViz)
system("ls ../ ")
mydate = '20120821'
myp='By4743'
mypath='../fcs.DHR'
mypath='../fcs.ONDHR'
myalias = paste(substr(mypath,4,27), myp, mydate, sep='.'); print(myalias)
myalias = str_replace( myalias, "/", "."); print(myalias)
fs = read.flowSet(path=mypath, pattern=myp)
mypath
fs = read.flowSet(path=mypath, pattern=myp)
print(myp)
pData(phenoData(fs))
xyplot(`SSC-H` ~ `FSC-H`, data=fs);
xyplot(`FL1-H` ~ `FL3-H`, data=fs);
#tf = transformList(from=colnames(fs), tfun=log10)
tf = transformList(from=colnames(fs), tfun=asinh)
#not working #tf = transformList(from=colnames(fs), tfun=function(x) if(x>0) log10(x) else 0 )
fs2 = tf %on% fs
xyplot(`SSC-H` ~ `FSC-H`, data=fs2);
xyplot(`FL1-H` ~ `FL3-H`, data=fs2);
rgate1 = rectangleGate('FSC-H'=c(asinh(100), asinh(1E4)), 'SSC-H'=c(asinh(100),asinh(1E4)))
my.filter = filter(fs2, rgate1)
fs3 = Subset(fs2, my.filter)
print(fs3)
out = pData(fs3)
out[, c("FSC-H", "SSC-H", "FL1-H", "FL3-H")] = NA;
out$H2O2 = c(0, 0.025, 0.05, 0.075, 0.1, 0.2)  #####2012 August 3 change Here !!!!!
out.means = out;
for( kk in 1: length(pData(fs3)[,1]) ) {
means = apply( fs3[[kk]]@exprs[, c("FSC-H", "SSC-H", "FL1-H", "FL3-H")], 2, mean)
vars  = apply( fs3[[kk]]@exprs[, c("FSC-H", "SSC-H", "FL1-H", "FL3-H")], 2, var)
out[kk,c("FSC-H", "SSC-H", "FL1-H", "FL3-H") ] = sqrt(vars)/means
out.means[kk,c("FSC-H", "SSC-H", "FL1-H", "FL3-H") ] = means
}
plot( out[,c("FL3-H")] ~ out[,c("FL1-H")] )
xyplot(`FL3-H` ~ `FL1-H`, data=fs3, filter=rgate1)
densityplot(~ ., fs3, channels=c("FL1-H", "FL3-H"), filter=list(curv1Filter("FL1-H"),  curv1Filter("FL3-H")),
xlab=c('H2O2 signals','Superoxide signals'));
rm(list=ls())
library(stringr)
debug = 0;
require(flowCore);  require(flowClust); require(flowViz)
system("ls ../ ")
mydate = '20120821'
myp='By4743'
#mypath='../fcs.DHRDHE'
#mypath='../fcs.blank'
#mypath='../fcs.DHE'
mypath='../fcs.DHR'
mypath='../fcs.ONDHR'
myalias = paste(substr(mypath,4,27), myp, mydate, sep='.'); print(myalias)
myalias = str_replace( myalias, "/", "."); print(myalias)
fs = read.flowSet(path=mypath, pattern=myp)
print(myp)
pData(phenoData(fs))
xyplot(`SSC-H` ~ `FSC-H`, data=fs);
xyplot(`FL1-H` ~ `FL3-H`, data=fs);
#tf = transformList(from=colnames(fs), tfun=log10)
tf = transformList(from=colnames(fs), tfun=asinh)
#not working #tf = transformList(from=colnames(fs), tfun=function(x) if(x>0) log10(x) else 0 )
fs2 = tf %on% fs
xyplot(`SSC-H` ~ `FSC-H`, data=fs2);
xyplot(`FL1-H` ~ `FL3-H`, data=fs2);
rgate1 = rectangleGate('FSC-H'=c(asinh(100), asinh(1E4)), 'SSC-H'=c(asinh(100),asinh(1E4)))
my.filter = filter(fs2, rgate1)
fs3 = Subset(fs2, my.filter)
print(fs3)
out = pData(fs3)
out[, c("FSC-H", "SSC-H", "FL1-H", "FL3-H")] = NA;
out$H2O2 = c(0, 0.025, 0.05, 0.075, 0.1, 0.2)  #####2012 August 3 change Here !!!!!
out.means = out;
for( kk in 1: length(pData(fs3)[,1]) ) {
means = apply( fs3[[kk]]@exprs[, c("FSC-H", "SSC-H", "FL1-H", "FL3-H")], 2, mean)
vars  = apply( fs3[[kk]]@exprs[, c("FSC-H", "SSC-H", "FL1-H", "FL3-H")], 2, var)
out[kk,c("FSC-H", "SSC-H", "FL1-H", "FL3-H") ] = sqrt(vars)/means
out.means[kk,c("FSC-H", "SSC-H", "FL1-H", "FL3-H") ] = means
}
plot( out[,c("FL3-H")] ~ out[,c("FL1-H")] )
plot( out[,c("FL1-H")] ~ out[,c("H2O2")] )
plot( out[,c("FL3-H")] ~ out[,c("H2O2")] )
summary(lm(out[,c("FL3-H")] ~ out[,c("FL1-H")]) )
summary(lm(out[,c("FL1-H")] ~ out[,c("H2O2")]) )
summary(lm(out[,c("FL3-H")] ~ out[,c("H2O2")]) )
summary(lm(out.means[,c("FL1-H")] ~ out.means[,c("H2O2")]) )
summary(lm(out.means[,c("FL3-H")] ~ out.means[,c("H2O2")]) )
write.csv(out, paste(myalias, 'CV', 'csv', sep='.') )
write.csv(out.means, paste(myalias, 'means', 'csv', sep='.') )
pdf(paste(myalias, 'FL1-3scatter', 'pdf', sep='.'))
xyplot(`FL3-H` ~ `FL1-H`, data=fs3, filter=rgate1)
#xyplot(`FL3-H` ~ `FL1-H`, data=fs3)
dev.off()
pData(phenoData(fs3))
# fs3@phenoData@data$name = c('0% glu', '0.01% glu', '0.1% glu', '0.25% glu', '0.5% glu', '1% glu', '2% glu') #2012 July 11 change
pdf(paste(myalias, 'FL1-3marginal', 'pdf', sep='.'), width=6, height=4)
#densityplot(~ `FL1-H`, data=fs3, filter=curv1Filter("FL1-H"))
#densityplot(~ ., fs3, channels=c("FL1-H", "FL3-H"), filter=list(curv1Filter("FL1-H"),  curv1Filter("FL3-H")))
densityplot(~ ., fs3, channels=c("FL1-H", "FL3-H"), filter=list(curv1Filter("FL1-H"),  curv1Filter("FL3-H")),
xlab=c('H2O2 signals','Superoxide signals'));
#densityplot(~ "FL1-H", fs3,  filter=curv1Filter("FL1-H") )
dev.off()
pdf(paste(myalias, 'SSC-FSC', 'pdf', sep='.'));
xyplot(`SSC-H` ~ `FSC-H`, data=fs3, filter=rgate1);
dev.off()
#quit("no")
rm(list=ls())
library(stringr)
debug = 0;
require(flowCore);  require(flowClust); require(flowViz)
system("ls ../ ")
mydate = '20120821'
myp='By4743'
mypath='../fcs.DHRDHE'
#mypath='../fcs.blank'
#mypath='../fcs.DHE'
#mypath='../fcs.DHR'
#mypath='../fcs.ONDHR'
myalias = paste(substr(mypath,4,27), myp, mydate, sep='.'); print(myalias)
myalias = str_replace( myalias, "/", "."); print(myalias)
fs = read.flowSet(path=mypath, pattern=myp)
print(myp)
pData(phenoData(fs))
xyplot(`SSC-H` ~ `FSC-H`, data=fs);
xyplot(`FL1-H` ~ `FL3-H`, data=fs);
#tf = transformList(from=colnames(fs), tfun=log10)
tf = transformList(from=colnames(fs), tfun=asinh)
#not working #tf = transformList(from=colnames(fs), tfun=function(x) if(x>0) log10(x) else 0 )
fs2 = tf %on% fs
xyplot(`SSC-H` ~ `FSC-H`, data=fs2);
xyplot(`FL1-H` ~ `FL3-H`, data=fs2);
rgate1 = rectangleGate('FSC-H'=c(asinh(100), asinh(1E4)), 'SSC-H'=c(asinh(100),asinh(1E4)))
my.filter = filter(fs2, rgate1)
fs3 = Subset(fs2, my.filter)
print(fs3)
out = pData(fs3)
out[, c("FSC-H", "SSC-H", "FL1-H", "FL3-H")] = NA;
out$H2O2 = c(0, 0.025, 0.05, 0.075, 0.1, 0.2)  #####2012 August 3 change Here !!!!!
out.means = out;
for( kk in 1: length(pData(fs3)[,1]) ) {
means = apply( fs3[[kk]]@exprs[, c("FSC-H", "SSC-H", "FL1-H", "FL3-H")], 2, mean)
vars  = apply( fs3[[kk]]@exprs[, c("FSC-H", "SSC-H", "FL1-H", "FL3-H")], 2, var)
out[kk,c("FSC-H", "SSC-H", "FL1-H", "FL3-H") ] = sqrt(vars)/means
out.means[kk,c("FSC-H", "SSC-H", "FL1-H", "FL3-H") ] = means
}
plot( out[,c("FL3-H")] ~ out[,c("FL1-H")] )
plot( out[,c("FL1-H")] ~ out[,c("H2O2")] )
plot( out[,c("FL3-H")] ~ out[,c("H2O2")] )
summary(lm(out[,c("FL3-H")] ~ out[,c("FL1-H")]) )
summary(lm(out[,c("FL1-H")] ~ out[,c("H2O2")]) )
summary(lm(out[,c("FL3-H")] ~ out[,c("H2O2")]) )
summary(lm(out.means[,c("FL1-H")] ~ out.means[,c("H2O2")]) )
summary(lm(out.means[,c("FL3-H")] ~ out.means[,c("H2O2")]) )
write.csv(out, paste(myalias, 'CV', 'csv', sep='.') )
write.csv(out.means, paste(myalias, 'means', 'csv', sep='.') )
pdf(paste(myalias, 'FL1-3scatter', 'pdf', sep='.'))
xyplot(`FL3-H` ~ `FL1-H`, data=fs3, filter=rgate1)
#xyplot(`FL3-H` ~ `FL1-H`, data=fs3)
dev.off()
pData(phenoData(fs3))
# fs3@phenoData@data$name = c('0% glu', '0.01% glu', '0.1% glu', '0.25% glu', '0.5% glu', '1% glu', '2% glu') #2012 July 11 change
pdf(paste(myalias, 'FL1-3marginal', 'pdf', sep='.'), width=6, height=4)
#densityplot(~ `FL1-H`, data=fs3, filter=curv1Filter("FL1-H"))
#densityplot(~ ., fs3, channels=c("FL1-H", "FL3-H"), filter=list(curv1Filter("FL1-H"),  curv1Filter("FL3-H")))
densityplot(~ ., fs3, channels=c("FL1-H", "FL3-H"), filter=list(curv1Filter("FL1-H"),  curv1Filter("FL3-H")),
xlab=c('H2O2 signals','Superoxide signals'));
#densityplot(~ "FL1-H", fs3,  filter=curv1Filter("FL1-H") )
dev.off()
pdf(paste(myalias, 'SSC-FSC', 'pdf', sep='.'));
xyplot(`SSC-H` ~ `FSC-H`, data=fs3, filter=rgate1);
dev.off()
#quit("no")
